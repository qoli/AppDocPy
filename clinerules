# Swift 項目 LLM 輔助開發指南

## 文檔使用規範

1. 文檔結構導航
   - AppDocs 目錄組織了不同類型的組件文檔
   - 開發前先瀏覽對應目錄了解現有組件
   - 按 Views/ViewModels/Models/Services 分類查找所需組件
   - 注意查看 Others 目錄可能的通用組件

2. 向 LLM 提供上下文
   - 共享相關組件的 .md 文檔內容
   - 說明組件之間的依賴關係
   - 指出需要重用的現有功能
   - 描述需要新增或修改的部分

## 開發流程指南

1. 需求分析階段
   - 查閱 Models/ 目錄了解數據結構
   - 瀏覽 Services/ 目錄了解可用服務
   - 查看 Views/ 目錄了解現有UI組件
   - 分析 ViewModels/ 目錄了解業務邏輯

2. 設計規劃階段
   ```bash
   # 向 LLM 提供上下文的示例：
   "這是我們的數據模型：
   {Models/OrderEntity.swift.md 內容}
   
   這是現有的訂單服務：
   {Services/OrderService.swift.md 內容}
   
   請幫我設計一個新的訂單列表頁面"
   ```

3. 實現指導
   ```bash
   # 開發新功能時的順序：
   1. 先共享相關 Model 文檔
   2. 再提供對應 Service 文檔
   3. 分享相關的 ViewModel 文檔
   4. 最後是 UI 相關的 View 文檔
   ```

## 最佳實踐示例

1. 實現新功能
   ```bash
   # 錯誤示範
   "幫我實現一個訂單詳情頁面"

   # 正確示範
   "這是我們的訂單模型和服務實現：
   {Models/OrderEntity.swift.md}
   {Services/OrderService.swift.md}
   
   請基於這些實現訂單詳情頁面，需要展示訂單的基本信息和狀態"
   ```

2. 修改現有功能
   ```bash
   # 錯誤示範
   "幫我修改訂單列表的排序邏輯"

   # 正確示範
   "這是當前的訂單列表實現：
   {ViewModels/OrderListViewModel.swift.md}
   {Views/OrderListView.swift.md}
   
   請幫我增加按訂單時間排序的功能"
   ```

3. 組件重用
   ```bash
   # 錯誤示範
   "實現一個通用的列表組件"

   # 正確示範
   "這是我們現有的列表組件實現：
   {Views/CommonListView.swift.md}
   
   請基於這個組件，實現一個支持下拉刷新的版本"
   ```

## 注意事項

1. 文檔完整性
   - 總是提供完整的相關組件文檔
   - 包含所有依賴組件的文檔
   - 說明組件間的交互關係
   - 提供必要的業務上下文

2. 開發效率
   - 優先查找可重用的組件
   - 善用現有的服務層邏輯
   - 複用已實現的數據模型
   - 參考相似功能的實現方式

3. 代碼一致性
   - 遵循文檔中展示的代碼風格
   - 保持相似功能的實現模式
   - 參考現有組件的架構設計
   - 維護統一的項目結構

## 溝通技巧

1. 提供上下文
   - 共享完整的相關文檔
   - 解釋業務需求和約束
   - 說明技術限制和要求
   - 描述預期的實現效果

2. 迭代優化
   - 基於文檔討論設計方案
   - 參考相似功能的實現
   - 評估不同方案的優劣
   - 及時調整開發方向

3. 問題解決
   - 提供相關組件的錯誤處理方式
   - 分享類似問題的解決方案
   - 說明現有的測試覆蓋情況
   - 討論潛在的性能影響